#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('twilio-transcription:server');
var http = require('http');
var WebSocket = require("ws");
const AWS = require("@aws-sdk/client-transcribe-streaming");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Create Web Socket server.
 * */
var wss = new WebSocket.Server({server});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

const client = new AWS.TranscribeStreamingClient({
    region: "us-east-2",
    credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    }
});

// Handle Web Socket Connection
wss.on("connection", function connection(ws) {
    const audioStream = async function* (chunk) {
        yield { AudioEvent: { AudioChunk: chunk } };
    };
    console.log("New Connection Initiated");

    ws.on("message", function incoming(message) {
        const msg = JSON.parse(message);
        let flag=true;
        switch (msg.event) {
            case "connected":
                console.log(`A new call has connected.`);
                break;
            case "start":
                console.log(`Starting Media Stream ${msg.streamSid}`);
                break;
            case "media":
                console.log(`Receiving Audio...`);
                let params={
                    "MediaSampleRateHertz": 8000,
                    "LanguageCode": 'es-US',
                    "MediaEncoding": 'pcm',
                    "AudioStream": {
                        "AudioEvent": {
                            "AudioChunk": msg.media.payload
                        }
                    }
                };
                client.send(new AWS.StartStreamTranscriptionCommand(params)).then(data=>console.log(data)).catch(err=>console.log(err));
                break;
            case "stop":
                console.log(`Call Has Ended`);
                flag=false;
                client.destroy();
                break;
        }
    });

});